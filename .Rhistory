getwd()
setwd("~/DATA SCIENCE/R default")
dir()
x <- m
x <- 2
print(x)
x = 3
print(x)
y = 1L
y
type(y)
class(y)
class(x)
x <- 9:29
class(x)
x <- 9.0:29.0
class(x)
library(datasets)
data(iris)
iris
mean(iris[,1])
ind = iris[,5]=="virginica"
iris[ind,1]
mean(iris[ind,1])
apply(iris[, 1:4], 2, mean)
set.seed(1)
rpois(5, 2)
setwd("~/ETUDES/MOOCs/R programming (John Hopkins)/Week 3 assignment/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inv
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- replicate(10, rnorm(10))
makeCacheMatrix(x)
cacheSolve(x)
x <- replicate(10, rnorm(10))
x
makeCacheMatrix(x)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inv
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x[getinv()]
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x[get()]
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- replicate(10, rnorm(10))
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inv
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x$get()$
inv <- solve(data, ...)
x$setinv(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inv
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x$get()$
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- replicate(10, rnorm(10))
y <- makeCacheMatrix(x)
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inv
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
## testing these 2 functions
x <- replicate(10, rnorm(10))
y <- makeCacheMatrix(x)
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- inv
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
## testing these 2 functions
x <- replicate(10, rnorm(10))
y <- makeCacheMatrix(x)
i <- cacheSolve(y)
test <- i %*% x
print(test)
